ls
prints the list of files in current dirdctory

--------------------------------------------------------------------------------------------------------------

# Open a file: file
file = open('moby_dick.txt', mode='r')

# Print it
print(file.read())

# Check whether file is closed
print(file.closed)

# Close file
file.close()

# Check whether file is closed
print(file.closed)


--------------------------------------------------------------------------------------------------------------

# Read & print the first 3 lines
with open('moby_dick.txt') as file:
    print(file.readline())
    print(file.readline())
    print(file.readline())


--------------------------------------------------------------------------------------------------------------

# Import numpy
import numpy as np

# Assign the filename: file
file = 'digits_header.txt'

# Load the data: data
data = np.loadtxt(file, delimiter='\t', skiprows=1, usecols=[0,2])

# Print data
print(data)

--------------------------------------------------------------------------------------------------------------

# Assign filename: file
file = 'seaslug.txt'

# Import file: data
data = np.loadtxt(file, delimiter='\t', dtype=str)

# Print the first element of data
print(data[0])

# Import data as floats and skip the first row: data_float
data_float = np.loadtxt(file, delimiter='\t', dtype=float, skiprows=1)

# Print the 10th element of data_float
print(data_float[9])

# Plot a scatterplot of the data
plt.scatter(data_float[:, 0], data_float[:, 1])
plt.xlabel('time (min.)')
plt.ylabel('percentage of larvae')
plt.show()

--------------------------------------------------------------------------------------------------------------

data = np.genfromtxt('titanic.csv', delimiter=',', names=True, dtype=None)

Much of the time you will need to import datasets which have different datatypes in different columns; 
one column may contain strings and another floats, for example. The function np.loadtxt() will freak at this. 
There is another function, np.genfromtxt(), which can handle such structures. If we pass dtype=None to it, 
it will figure out what types each column should be.

--------------------------------------------------------------------------------------------------------------

You have just used np.genfromtxt() to import data containing mixed datatypes. There is also another function np.recfromcsv() that behaves similarly to np.genfromtxt(), except that its default dtype is None. In this exercise, you'll practice using this to achieve the same result.

# Assign the filename: file
file = 'titanic.csv'

# Import file using np.recfromcsv: d
d = np.recfromcsv('titanic.csv', names=True)

# Print out first three entries of d
print(d[:3])

You'll only need to pass file to it because it has the defaults delimiter=',' and names=True in addition to dtype=None!

--------------------------------------------------------------------------------------------------------------

# Assign the filename: file
file = 'digits.csv'

# Read the first 5 rows of the file into a DataFrame: data
data  = pd.read_csv(file, nrows=5, header=None)

# Build a numpy array from the DataFrame: data_array
data_array = data.values

# Print the datatype of data_array to the shell
print(type(data_array))

--------------------------------------------------------------------------------------------------------------

data = pd.read_csv(file, sep='\t', comment='#', na_values='Nothing')

this ignore the text written as comment starting with "#" in any column.
and missing values referred as "Nothing" will be marked as NaN

--------------------------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------------------------------------